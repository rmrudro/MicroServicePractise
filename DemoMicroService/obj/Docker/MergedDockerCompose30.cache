name: dockercompose16444095067853812663
services:
  customerdb:
    container_name: customer-db
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: GsGc0709__
    image: mcr.microsoft.com/mssql/server:2019-latest
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 1433
      published: "18001"
      protocol: tcp
  customerwebapi:
    build:
      context: A:\C# Code Practice\MicroServicePractice\C#Practise\DemoMicroService
      dockerfile: CustomerWebApi/Dockerfile
    container_name: customer-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: https://+:443;http://+:80
      DB_HOST: customer-db
      DB_NAME: customer
      DB_SA_PASSWORD: GsGc0709__
    image: customerwebapi
    networks:
      backend: null
    volumes:
    - type: bind
      source: C:\Users\rmrud\AppData\Roaming/Microsoft/UserSecrets
      target: /root/.microsoft/usersecrets
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: C:\Users\rmrud\AppData\Roaming/ASP.NET/Https
      target: /root/.aspnet/https
      read_only: true
      bind:
        create_host_path: true
  productdb:
    container_name: product-db
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: GsGc0709__
    image: mcr.microsoft.com/mssql/server:2019-latest
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 3306
      published: "18003"
      protocol: tcp
  productwebapi:
    build:
      context: A:\C# Code Practice\MicroServicePractice\C#Practise\DemoMicroService
      dockerfile: ProductWebApi/Dockerfile
    container_name: product-api
    environment:
      DB_HOST: productdb
      DB_NAME: dms_product
      DB_ROOT_PASSWORD: GsGc0709__
    image: productwebapi
    networks:
      backend: null
networks:
  backend:
    name: dockercompose16444095067853812663_backend